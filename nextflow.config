nextflow.enable.dsl = 2

params {
    // ... your params section unchanged ...
}

// Dependencies docker image
process.container = 'bluemoon222/gbs-typer-sanger-nf:0.0.7'

// Process settings
process {
    maxRetries = 2
    errorStrategy = { task.attempt <= process.maxRetries ? 'retry' : 'ignore' }
   
    withLabel: bash_container { container = 'wbitt/network-multitool:340b0bd' }
    withLabel: python_container { container = 'amancevice/pandas:2.2.2' }
    withLabel: fastp_container { container = 'staphb/fastp:0.24.1' }
    withLabel: shovill_container { container = 'staphb/shovill:1.1.0-2022Dec' }
    withLabel: unicycler_container { container = 'staphb/unicycler:0.5.1' }
    withLabel: quast_container { container = 'staphb/quast:5.2.0' }
    withLabel: bwa_container { container = 'staphb/bwa:0.7.19' }
    withLabel: samtools_container { container = 'staphb/samtools:1.21' }
    withLabel: bcftools_container { container = 'staphb/bcftools:1.22' }
    withLabel: kraken2_container { container = 'staphb/kraken2:2.1.5' }
    withLabel: bracken_container { container = 'staphb/bracken:3.1' }
    withLabel: gbstyper_container { container = 'bluemoon222/gbs-typer-sanger-nf:0.0.7' }

    withName: srst2_for_res_typing     { label = 'gbstyper_container' }
    withName: split_target_RES_seq_from_sam_file { label = 'gbstyper_container' }
    withName: split_target_RES_sequences { label = 'gbstyper_container' }
    withName: freebayes                { label = 'gbstyper_container' }
    withName: res_typer                { label = 'gbstyper_container' }
    withName: serotyping               { label = 'gbstyper_container' }
    withName: surface_typer            { label = 'gbstyper_container' }
    withName: getmlst_for_srst2        { label = 'gbstyper_container' }
    withName: srst2_for_mlst           { label = 'gbstyper_container' }
    withName: get_mlst_allele_and_pileup { label = 'gbstyper_container' }
    withName: get_pbp_genes            { label = 'gbstyper_container' }
    withName: get_pbp_alleles          { label = 'gbstyper_container' }

    // === SRST2-specific tmp isolation fix ===
    withName: srst2_for_mlst {
        maxForks = 1
        beforeScript = "mkdir -p ${task.workDir}/_tmp"
        containerOptions = "--bind ${task.workDir}/_tmp:/tmp"
    }
    withName: srst2_for_res_typing {
        maxForks = 1
        beforeScript = "mkdir -p ${task.workDir}/_tmp"
        containerOptions = "--bind ${task.workDir}/_tmp:/tmp"
    }
}

singularity {
    envWhitelist = 'TMPDIR,TMP,TEMP,SINGULARITYENV_TMPDIR,SINGULARITYENV_TMP,SINGULARITYENV_TEMP'
}

// Set parameters of different run environments
profiles {
    standard {
        process.executor = 'local'
        docker.enabled = true
        docker.runOptions = '-u $(id -u):$(id -g)'
    }

    singularity {
        params.singularity_cachedir = "$projectDir/singularity_cache"
        singularity.enabled = true
        singularity.autoMounts = true
        singularity.cacheDir = params.singularity_cachedir
    }

    lsf {
        params.singularity_cachedir = "$projectDir/singularity_cache"
        params.kraken2_memory_mapping = false

        process {
            executor = 'lsf'
            scratch = true
            time = {30.min * task.attempt}
            maxRetries = 4

            withLabel: farm_low    { cpus = 1;  memory = {1.GB * task.attempt} }
            withLabel: farm_mid    { cpus = 8;  memory = {4.GB * task.attempt} }
            withLabel: farm_high   { cpus = 32; memory = {16.GB * task.attempt} }
            withLabel: farm_slow   { time = {2.hour * task.attempt} }
            withLabel: farm_scratchless { scratch = false }
            withLabel: farm_local  { executor = 'local' }
        }
        executor.perJobMemLimit = true
        singularity.enabled = true
        singularity.autoMounts = true
        singularity.cacheDir = params.singularity_cachedir
    }
}
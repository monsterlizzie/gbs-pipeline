nextflow.enable.dsl = 2

params {
  // Paths
  reads   = "$projectDir/input"
  output  = "$projectDir/output"
  db      = "$projectDir/databases"

  // Assembler
  assembler         = "shovill"
  assembler_thread  = 0
  min_contig_length = 500
  assembly_publish  = "link"

  // Kraken/Bracken
  kraken2_db_remote      = "https://genome-idx.s3.amazonaws.com/kraken/minikraken2_v1_8GB_201904.tgz"
  kraken2_memory_mapping = false
  read_len               = 150
  classification_level   = 'S'
  threshold              = 10

  // Reference genome
  ref_genome = "$projectDir/data/CP129876.1.fasta"

  // QC thresholds
  sagalactiae_percentage               = 70.00
  top_non_agalactiae_species_percentage = 5.00
  ref_coverage = 70.0
  het_snp_site = 40
  contigs      = 500
  length_low   = 1400000
  length_high  = 2800000
  depth        = 20.00

  // Storage saver
  lite = false

  // Typer outputs
  sero_res_incidence_out        = "typer/serotype_res_incidence.txt"
  variants_out                  = "typer/gbs_res_variants.txt"
  alleles_variants_out          = "typer/drug_cat_alleles_variants.txt"
  res_accessions_out            = "typer/resfinder_accessions.txt"
  existing_pbp_alleles_out      = "typer/existing_pbp_alleles.txt"
  surface_protein_incidence_out = "typer/surface_protein_incidence.txt"
  surface_protein_variants_out  = "typer/surface_protein_variants.txt"
  existing_mlst_alleles_out     = "typer/existing_sequence_types.txt"
  new_mlst_alleles_status       = "typer/new_mlst_alleles.log"
  gbs_typer_report              = "typer/gbs_typer_report.txt"

  // GBS-Typer DB
  db_typing  = "$projectDir/db_typing"
  version    = ""
  db_version = "0.2.1"
  db_dir     = "${params.db_typing}/${params.db_version}"

  sero_gene_db = "${params.db_typing}/GBS-SBG/GBS-SBG.fasta"
  config       = "${params.db_typing}/headers.json"

  serotyper_min_read_depth = 0

  gbs_blactam_db   = "${params.db_dir}/GBS_bLactam-DB/GBS_bLactam_Ref.fasta"
  gbs_blactam_1A_db = "${params.db_dir}/GBS_bLactam-DB/GBS_bLactam_1A-DB.faa"
  gbs_blactam_2B_db = "${params.db_dir}/GBS_bLactam-DB/GBS_bLactam_2B-DB.faa"
  gbs_blactam_2X_db = "${params.db_dir}/GBS_bLactam-DB/GBS_bLactam_2X-DB.faa"

  gbs_res_typer_db   = "${params.db_dir}/GBS_resTyper_Gene-DB/GBS_Res_Gene-DB_Final.fasta"
  gbs_res_targets_db = "${params.db_dir}/GBS_resTyper_Gene-DB/seqs_of_interest.txt"

  gbs_res_min_coverage   = 99.9
  gbs_res_max_divergence = 5

  mlst_min_coverage   = 99.999
  mlst_min_read_depth = 30

  other_res_db             = "${params.db_dir}/ResFinder-DB/ResFinder.fasta"
  other_res_min_coverage   = 70
  other_res_max_divergence = 30

  restyper_min_read_depth = 30

  gbs_surface_typer_db        = "${params.db_dir}/GBS_Surface_Gene-DB/GBS_Surface_Gene-DB_Final.fasta"
  surfacetyper_min_coverage   = 99.0
  surfacetyper_max_divergence = 8
  surfacetyper_min_read_depth = 30

  pbp_frac_align_threshold    = 0.5
  pbp_frac_identity_threshold = 0.5

  // Toggles
  run_sero_res     = true
  run_surfacetyper = true
  run_mlst         = true
  run_pbptyper     = false
}

// Default container
process.container = 'bluemoon222/gbs-typer-sanger-nf:0.0.7'

// Global process settings
process {
  maxRetries = 2
  errorStrategy = { task.attempt <= process.maxRetries ? 'retry' : 'ignore' }

  // Label â†’ container map
  withLabel: bash_container      { container = 'wbitt/network-multitool:340b0bd' }
  withLabel: python_container    { container = 'amancevice/pandas:2.2.2' }
  withLabel: fastp_container     { container = 'staphb/fastp:0.24.1' }
  withLabel: shovill_container   { container = 'staphb/shovill:1.1.0-2022Dec' }
  withLabel: unicycler_container { container = 'staphb/unicycler:0.5.1' }
  withLabel: quast_container     { container = 'staphb/quast:5.2.0' }
  withLabel: bwa_container       { container = 'staphb/bwa:0.7.19' }
  withLabel: samtools_container  { container = 'staphb/samtools:1.21' }
  withLabel: bcftools_container  { container = 'staphb/bcftools:1.22' }
  withLabel: kraken2_container   { container = 'staphb/kraken2:2.1.5' }
  withLabel: bracken_container   { container = 'staphb/bracken:3.1' }
  withLabel: gbstyper_container  { container = 'bluemoon222/gbs-typer-sanger-nf:0.0.7' }

  // Map module names to gbstyper image
  withName: srst2_for_res_typing            { label = 'gbstyper_container' }
  withName: split_target_RES_seq_from_sam_file { label = 'gbstyper_container' }
  withName: split_target_RES_sequences      { label = 'gbstyper_container' }
  withName: freebayes                       { label = 'gbstyper_container' }
  withName: res_typer                       { label = 'gbstyper_container' }
  withName: serotyping                      { label = 'gbstyper_container' }
  withName: surface_typer                   { label = 'gbstyper_container' }
  withName: getmlst_for_srst2               { label = 'gbstyper_container' }
  withName: srst2_for_mlst                  { label = 'gbstyper_container' }
  withName: get_mlst_allele_and_pileup      { label = 'gbstyper_container' }
  withName: get_pbp_genes                   { label = 'gbstyper_container' }
  withName: get_pbp_alleles                 { label = 'gbstyper_container' }
}

// Execution profiles
profiles {

  // Local + Docker
  standard {
    process { executor = 'local' }
    docker {
      enabled = true
      runOptions = '-u $(id -u):$(id -g)'
    }
  }

  // Local + Singularity
  singularity {
    params.singularity_cachedir = "$projectDir/singularity_cache"
    singularity {
      enabled     = true
      autoMounts  = true
      cacheDir    = params.singularity_cachedir
    }
  }

  // LSF + Singularity (farm)
  lsf {
    params.singularity_cachedir   = "$projectDir/singularity_cache"
    params.kraken2_memory_mapping = false

    process {
      executor   = 'lsf'
      scratch    = true
      time       = { 30.min * task.attempt }
      maxRetries = 4

      withLabel: farm_low        { cpus = 1;  memory = { 1.GB  * task.attempt } }
      withLabel: farm_mid        { cpus = 8;  memory = { 4.GB  * task.attempt } }
      withLabel: farm_high       { cpus = 32; memory = { 16.GB * task.attempt } }
      withLabel: farm_slow       { time  = { 2.hour * task.attempt } }
      withLabel: farm_scratchless{ scratch = false }
      withLabel: farm_local      { executor = 'local' }

      withLabel: srst2           { containerOptions = '--pid=false' }
    }

    executor { perJobMemLimit = true }

    singularity {
      enabled     = true
      autoMounts  = true
      cacheDir    = params.singularity_cachedir
    }
  }
}